<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
  <name>oned</name>

  <author>Rodney Polkinghorne</author>
  <description>
    Gross-Pitaevskii equations for the dynamically stabilised false vacuum, in one dimension.  See derivations.tex for the meanings of the parameters; I've used the Plan 9 keyboard mapping from greek letters to roman ones.
  </description>

  <features>
    <bing />
    <diagnostics />
    <fftw plan="patient" />
    <auto_vectorise />
    <arguments>
        <argument name="dF" type="real" default_value="0.1" />
        <argument name="F" type="real" default_value="-1.0" />
        <argument name="L" type="real" default_value="1" />
        <argument name="U" type="real" default_value="0.1" />
        <argument name="Y" type="real" default_value="0.1" />
        <argument name="W" type="real" default_value="0.1" />
     </arguments>
   </features>

  <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="space" lattice="128" domain="(-5,5)" />
    </transverse_dimensions>
  </geometry>
  
  <driver name="multi-path" paths="1" />

  <noise_vector name="initialPhaseNoise" dimensions="space" kind="Gaussian" 
      type="real">
    <components>nrml</components>
  </noise_vector>

  <vector name="initialState" type="complex" dimensions="space">
    <components>q00 q01</components>
    <initialisation>
      <dependencies>initialPhaseNoise</dependencies>
      <![CDATA[
      q00 = U/sqrt(2.0);
      q01 = F*q00;
      q00 *= cos(M_PI*dF*nrml) + i*sin(M_PI*dF*nrml);
      ]]>
    </initialisation>
  </vector>

  <vector name="meanFields" type="complex" dimensions="space">
    <components>q0 q1</components>
    <initialisation>
      <dependencies>initialState</dependencies>
      <![CDATA[
      q0 = q00;
      q1 = q01;
      ]]>
    </initialisation>
  </vector>
  
  <computed_vector name="normalisation" dimensions="" type="real">
    <components> N</components>
    <evaluation>
      <dependencies>meanFields</dependencies>
      <![CDATA[
        N = mod2(q0) + mod2(q1);
      ]]>
    </evaluation>
  </computed_vector>
  
  <computed_vector name="iprod" dimensions="" type="complex">
    <components>X Xt</components>
    <evaluation>
      <dependencies>meanFields initialState</dependencies>
      <![CDATA[
        X = conj(q00)*q0 + conj(q01)*q1;
        Xt = conj(q0)*q0 + conj(q1)*q1;
     ]]>
    </evaluation>
  </computed_vector>

  <sequence>
       
    <integrate algorithm="ARK45" interval="25.0" tolerance="1e-7">
      <samples>100 100 100</samples>
      <operators>
        <integration_vectors>meanFields</integration_vectors>
        <operator kind="ex" constant="yes">
          <operator_names>L11</operator_names>
          <![CDATA[
            L11 = -(i/L)*kspace*kspace*0.5;
          ]]>
        </operator>
        <![CDATA[
        dq0_dt = L11[q0] - i*L*mod2(q0)/(U*U) + 0.5*i*(L-1/L)*q0 +
            (i/2/L)*(1+sqrt(2)*Y*W*cos(W*t))*q1;
         dq1_dt = L11[q1] - i*L*mod2(q1)/(U*U) + 0.5*i*(L-1/L)*q1 +
            (i/2/L)*(1+sqrt(2)*Y*W*cos(W*t))*q0;
        ]]>
      </operators>
    </integrate>
    
    <breakpoint filename="state.xsil">
      	<dependencies>meanFields</dependencies>
    </breakpoint>
  </sequence>
  
  <output>
    <sampling_group basis="space(0)" initial_sample="yes">
      <moments>change</moments>
      <dependencies>meanFields initialState iprod</dependencies>
      <![CDATA[
        change = mod2(Xt*q0-X*q00) + mod2(Xt*q1-X*q01);
      ]]>
    </sampling_group>
    
    <sampling_group basis="" initial_sample="yes">
      <moments>Ntot</moments>
      <dependencies>normalisation</dependencies>
      <![CDATA[
        Ntot = N;
      ]]>
    </sampling_group>
    
    <sampling_group basis="" initial_sample="yes">
      <moments>Xabs  Xarg</moments>
      <dependencies>iprod</dependencies>
      <![CDATA[
        Xabs = abs(X);
        Xarg = arg(X);
      ]]>
    </sampling_group>
  </output>
</simulation>

